{"version":3,"file":"static/js/402.83d17b9a.chunk.js","mappings":"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","sources":["AuthService.tsx","components/ResetPassword/ResetPassowrd.tsx","components/common/Fields/PasswordField.tsx","models/ResetPasswordModel.tsx"],"sourcesContent":["import axios from \"axios\";\n\nconst API_URL = process.env.REACT_APP_API_URL;\n\nexport async function Signup(data: any) {\n  try {\n    const res = await axios.post<any>(API_URL + \"signup\", data);\n    return res.data;\n  } catch (error: any) {\n    return error.response.data;\n  }\n}\n\nexport async function Login(data: any) {\n  try {\n    const res = await axios.post<any>(API_URL + \"login\", data);\n    return res.data;\n  } catch (error: any) {\n    return error.response.data;\n  }\n}\n\nexport async function ForgotPassword(data: any) {\n  try {\n    const res = await axios.post<any>(API_URL + \"forgotpassword\", data);\n    return res.data;\n  } catch (error: any) {\n    return error.response.data;\n  }\n}\n\nexport async function CheckForResetPassword(data: any) {\n  try {\n    const res = await axios.post<any>(API_URL + \"checkfortoken\", data);\n    return res.data;\n  } catch (error: any) {\n    return error.response.data;\n  }\n}\n\nexport async function ResetPassword(data: any) {\n  try {\n    const res = await axios.post<any>(API_URL + \"resetpassword\", data);\n    return res.data;\n  } catch (error: any) {\n    return error.response.data;\n  }\n}\n\nexport async function VerifyAccount(token: any) {\n  try {\n    const res = await axios.get<any>(API_URL + \"verify\", {\n      headers: {\n        authorization: token,\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    return res.data;\n  } catch (error: any) {\n    return error.response.data;\n  }\n}\n\nexport async function ActivateAccount(token: any) {\n  try {\n    const res = await axios.put<any>(API_URL + \"active\", { token: token });\n    return res.data;\n  } catch (error: any) {\n    return error.response.data;\n  }\n}\n\nexport async function RegenerateLink(data: any) {\n  try {\n    const res = await axios.put<any>(API_URL + \"regeneratetoken\", data);\n    return res.data;\n  } catch (error: any) {\n    return error.response.data;\n  }\n}\n","import { FormProvider, useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\n\nimport { useState, useEffect } from \"react\";\nimport { useParams, useOutletContext } from \"react-router-dom\";\n\nimport PasswordField from \"../common/Fields/PasswordField\";\nimport { ResetPasswordSchema } from \"../../models/ResetPasswordModel\";\n\nimport {\n  ResetPassword as ResetPasswordService,\n  CheckForResetPassword as CheckForResetPasswordService,\n  RegenerateLink as RegenerateLinkService,\n} from \"../../AuthService\";\n\nimport { AiOutlineWarning } from \"react-icons/ai\";\nimport resetpassword from \"../../Images/resetpassword.jpg\";\n\nexport default function ResetPassword() {\n  const [APIerror, setAPIerror] = useState(\"\");\n  const [APIsuccess, setAPIsuccess] = useState({\n    message: \"\",\n    id: \"\",\n    isFor: \"\",\n  });\n  const [linkExpired, setlinkExpired] = useState({ message: \"\", id: \"\" });\n  const [APIsuccessfinal, setAPIsuccessfinal] = useState(\"\");\n\n  const methods = useForm({\n    mode: \"onChange\",\n    resolver: yupResolver(ResetPasswordSchema),\n  });\n\n  const params = useParams();\n  const { handleLoading } = useOutletContext<any>();\n\n  const onSubmit = async (data: any) => {\n    handleLoading(true);\n    setAPIsuccess({ ...APIsuccess, message: \"\" });\n    const res = await ResetPasswordService({\n      password: data.password,\n      id: APIsuccess.id,\n      isFor: APIsuccess.isFor,\n    });\n    if (res.success === 0) {\n      setAPIerror(res.message);\n      handleLoading(false);\n    } else if (res.success === 1) {\n      setAPIsuccessfinal(res.message);\n      handleLoading(false);\n    }\n  };\n\n  // for link expired\n  const handleRegenerateLink = async () => {\n    setlinkExpired({ ...linkExpired, message: \"\" });\n    const res = await RegenerateLinkService({\n      isFor: \"resetPassword\",\n      token: params.token,\n      id: linkExpired.id,\n    });\n    if (res.success === 1) {\n      setAPIsuccessfinal(res.message);\n    } else if (res.success === 0) {\n      setAPIerror(res.message);\n    }\n  };\n\n  useEffect(() => {\n    setAPIerror(\"\");\n    setAPIsuccess({ message: \"\", id: \"\", isFor: \"\" });\n    setlinkExpired({ message: \"\", id: \"\" });\n    CheckForResetPasswordService({\n      token: params.token,\n      isFor: \"resetpassword\",\n    }).then((res) => {\n      if (res.success === 0) {\n        setAPIerror(res.message);\n      } else if (res.success === 1) {\n        setAPIsuccess({ message: res.message, id: res.id, isFor: res.isFor });\n      } else if (res.success === 2) {\n        setlinkExpired({ message: res.message, id: res.userId });\n      }\n    });\n  }, []);\n\n  return (\n    <>\n      <div className=\"bg-light2 text-primary lg:py-10 lg:min-h-[550px] \">\n        <div className=\"container flex flex-col lg:flex-row-reverse justify-between\">\n          <div className=\"basis-1/2   flex items-center \">\n            <img\n              src={resetpassword}\n              alt=\"\"\n              className=\"h-48 w-48 md:h-72 md:w-72  mx-auto \"\n            />\n          </div>\n          {/* errors from api  */}\n          {APIerror.length > 0 && (\n            <div className=\"flex justify-center  items-center basis-1/2 \">\n              <div className=\"text-xl h-fit text-secondary flex space-x-4  items-center bg-warning rounded py-2 px-2 my-2\">\n                <AiOutlineWarning className=\"text-5xl\" />{\" \"}\n                <span>{APIerror}</span>\n              </div>\n            </div>\n          )}\n          {/* success msg  */}\n          {APIsuccessfinal.length > 0 && (\n            <div className=\"flex justify-center  items-center basis-1/2 \">\n              <div className=\"text-xl h-fit text-secondary  bg-success rounded py-2 px-2 my-2\">\n                <span>{APIsuccessfinal}</span>\n              </div>\n            </div>\n          )}\n          {/* Link expired  */}\n          {linkExpired.message.length > 0 && (\n            <div className=\"flex justify-center  items-center basis-1/2 \">\n              <div className=\"text-xl h-fit text-primary  py-2 px-2 my-2\">\n                <p className=\"\">\n                  Link is expired please{\" \"}\n                  <button\n                    className=\"underline text-light1 active:text-primary\"\n                    onClick={(e) => {\n                      e.preventDefault();\n                      handleRegenerateLink();\n                    }}\n                  >\n                    click Here\n                  </button>{\" \"}\n                  to regenerate Link\n                </p>\n              </div>\n            </div>\n          )}\n          {APIsuccess.message.length > 0 && (\n            <FormProvider {...methods}>\n              <form\n                onSubmit={methods.handleSubmit(onSubmit)}\n                className=\"p-5  basis-1/2\"\n              >\n                <div className=\" mx-auto lg:py-10 mt-8 max-w-[420px]\">\n                  <div className=\"text-center text-3xl capitalize\">\n                    Reset password\n                  </div>\n                  <PasswordField\n                    label=\"Password\"\n                    fieldname=\"password\"\n                  ></PasswordField>\n                  <PasswordField\n                    label=\"Confirm Password\"\n                    fieldname=\"confirmPassword\"\n                  ></PasswordField>\n                  <div className=\"mt-6 mb-3\">\n                    <button\n                      type=\"submit\"\n                      className={`px-10  font-semibold border border-light1 text-lg  rounded-xl text-center subpixel-antialiased \n              ${methods.formState.isValid ? \"text-primary\" : \"text-light1\"}`}\n                    >\n                      submit\n                    </button>\n                  </div>\n                </div>\n              </form>\n            </FormProvider>\n          )}\n        </div>\n      </div>\n    </>\n  );\n}\n","import { useState } from \"react\";\nimport { useFormContext, useController } from \"react-hook-form\";\n\nimport { AiOutlineEye, AiOutlineEyeInvisible } from \"react-icons/ai\";\n\nexport default function PasswordField({ fieldname, label, ...rest }: any) {\n  const methods = useFormContext();\n  const registration = methods.register(fieldname);\n  const { fieldState } = useController({ name: fieldname });\n  let error = fieldState?.error;\n\n  const [togglePasswordVisibility, settogglePasswordVisibility] = useState(0);\n\n  function HandlePasswordVisibilityToggle() {\n    if (togglePasswordVisibility === 0) settogglePasswordVisibility(1);\n    else settogglePasswordVisibility(0);\n  }\n\n  return (\n    <>\n      <div className=\"flex mt-5 space-x-2\">\n        <div className=\"relative w-full\">\n          <div className=\"form-floating w-full\">\n            <input\n              type={togglePasswordVisibility === 1 ? \"text\" : \"password\"}\n              {...registration}\n              {...rest}\n              className=\"form-control  block rounded px-2.5 pb-2.5 pt-5 w-full text-sm border\n            transition ease-in-out m-0  focus:outline-none focus:ring-0\"\n              placeholder={label}\n              autoComplete=\"on\"\n            />\n            <label className=\"text-primary capitalize\">{label}</label>\n          </div>\n          <label\n            className=\"absolute text-lg right-1 z-1 bottom-3.5 \"\n            onClick={(e) => {\n              e.preventDefault();\n              HandlePasswordVisibilityToggle();\n            }}\n          >\n            {togglePasswordVisibility === 0 ? (\n              <AiOutlineEye className=\"w-7 h-6\" />\n            ) : (\n              <AiOutlineEyeInvisible className=\"w-7 h-6\" />\n            )}\n          </label>\n        </div>\n        <div\n          className={`w-2 ${\n            error?.type !== \"required\" ? \"text-primary\" : \"text-danger\"\n          }`}\n        >\n          *\n        </div>\n      </div>\n      <div className=\"text-sm text-danger capitalize\">{error?.message}</div>\n    </>\n  );\n}\n","import * as Yup from \"yup\";\n\nconst ResetPasswordSchema = Yup.object().shape({\n  password: Yup.string()\n    .required(\"password is  Required\")\n    .matches(/.*[0-9].*/, \"at least one number is required\")\n    .matches(/(?=.*[A-Z])/, \"at least one capital letter is required\")\n    .matches(/(?=.*[@$!%*?&])/, \"at least one special charcter is required\")\n    .min(8, \"Min 8 Character is Required\")\n    .max(18, \"Max 18 Character is Allowed\"),\n  confirmPassword: Yup.string()\n    .required(\"confirm password is required\")\n    .matches(/.*[0-9].*/, \"at least one number is required\")\n    .matches(/(?=.*[A-Z])/, \"at least one capital letter is required\")\n    .matches(/(?=.*[@$!%*?&])/, \"at least one special charcter is required\")\n    .min(8, \"Min 8 Character is Required\")\n    .max(18, \"Max 18 Character is Allowed\")\n    .oneOf(\n      [Yup.ref(\"password\")],\n      \"confirm Password doesn't match with the password\"\n    ),\n});\nexport { ResetPasswordSchema };\n"],"names":["API_URL","process","Signup","data","axios","res","response","Login","ForgotPassword","CheckForResetPassword","ResetPassword","VerifyAccount","token","headers","authorization","Accept","ActivateAccount","RegenerateLink","useState","APIerror","setAPIerror","message","id","isFor","APIsuccess","setAPIsuccess","linkExpired","setlinkExpired","APIsuccessfinal","setAPIsuccessfinal","methods","useForm","mode","resolver","yupResolver","ResetPasswordSchema","params","useParams","handleLoading","useOutletContext","onSubmit","ResetPasswordService","password","success","handleRegenerateLink","RegenerateLinkService","useEffect","CheckForResetPasswordService","then","userId","className","src","resetpassword","alt","length","onClick","e","preventDefault","handleSubmit","PasswordField","label","fieldname","type","formState","isValid","rest","registration","useFormContext","register","fieldState","useController","name","error","togglePasswordVisibility","settogglePasswordVisibility","placeholder","autoComplete","Yup","shape","required","matches","min","max","confirmPassword","oneOf"],"sourceRoot":""}